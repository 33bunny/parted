#!/usr/bin/perl -w
# Read a GPT header, poke "9" into the 4-byte "Number of partition entries" slot
# compute crc32 of 9 partition table entries and poke that into place,
# recompute the primary header's CRC32 checksum and poke that into its slot.

# Set up:
# dev=dev-file
# dd if=/dev/null of=$dev bs=1 seek=1026MB
# parted -s -- $dev mklabel gpt

use strict;
use warnings;
use Digest::CRC qw(crc32);

(my $ME = $0) =~ s|.*/||;

my $in = 'dev-file';
my $n_partition_entries = 9;

sub partition_array_crc ($$)
{
  my ($n_entries, $in) = @_;
  open F, '<', $in
    or die "$ME: failed to open $in: $!\n";

  # Skip 1st 512-byte sector.
  sysseek (F, 2*512, 0)
    or die "$ME: $in: failed to seek: $!\n";

  # Read the array.
  my $p;
  my $buf;
  my $n = $n_partition_entries * 128;
  ($p = sysread F, $buf, $n) && $p == $n
    or die "$ME: $in: failed to read partition array: $!\n";
  close F;

  return crc32 $buf;
}


open F, '<', $in
  or die "$ME: failed to open $in: $!\n";

# Skip 1st 512-byte sector.
sysseek (F, 512, 0)
  or die "$ME: $in: failed to seek to byte 512: $!\n";

# Read the primary GPT header.
my $p;
my $buf;
($p = sysread F, $buf, 92) && $p == 92
  or die "$ME: $in: read failed: $!\n";
close F;

print substr ($buf, 0, 8), "\n";

# Zero the CRC32 field, bytes 16..19
my $orig_crc = unpack ('L', substr ($buf, 16, 4));
substr ($buf, 16, 4) = "\0" x 4;

# Before proceeding, compute CRC32 of header as a sanity check.
my $crc = crc32($buf);
$orig_crc == $crc
  or die "$ME: $in: cannot reproduce GPT header's CRC32\n";

# poke the $n_partition_entries value into place
substr ($buf, 80, 4) = pack ('L', $n_partition_entries);

# Compute CRC of partition array and put it in substr ($buf, 88, 4)
my $pa_crc = partition_array_crc $n_partition_entries, $in;
substr ($buf, 88, 4) = pack ('L', $pa_crc);

$crc = crc32($buf);
substr ($buf, 16, 4) = pack ('L', $crc);

# Write it back to the file:
open F, '+<', $in
  or die "$ME: failed to open $in: $!\n";
sysseek (F, 512, 0)
  or die "$ME: $in: failed to seek to byte 512: $!\n";
print F $buf
  or die "$ME: $in: write failed: $!\n";
close F
  or die "$ME: failed to close $in: $!\n";
